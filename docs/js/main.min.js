!function() {
    window.Settings = function(e) {
        Object.assign(this, e), this.toggle = function() {
            this.element.classList.toggle(this.opened);
        }, this.init = function() {
            this.toggler.addEventListener("click", this.toggle.bind(this));
        };
    };
}(), function(e) {
    const t = document.getElementById("check"), n = document.querySelector(".log"), s = document.getElementById("loader");
    new e({
        element: document.querySelector(".settings"),
        toggler: document.querySelector(".settings__toggle"),
        opened: "settings--opened"
    }).init();
    t.addEventListener("submit", function(e) {
        const i = (o = t, [ ...new window.FormData(o).entries() ].map(e => e.map(encodeURIComponent).join("=")).join("&"));
        var o;
        e.preventDefault(), n.classList.remove("log--visible"), s.classList.add("page-loading"), 
        n.innerHTML = "", t.url.disabled = !0, t.submit.disabled = !0, fetch(t.action + "?" + i).then(e => {
            if (e.ok) return e.text();
            throw Error("An error occurred while retrieving or analyzing the page");
        }).then(e => {
            const i = function(e) {
                const t = JSON.parse(e), n = t.formattedResults.ruleResults, s = t.ruleGroups.SPEED.score;
                return n.Speed = {
                    localizedRuleName: "Total",
                    ruleImpact: s
                }, Object.entries(n);
            }(e), o = (r = i, r.reduce((e, t) => {
                const [n, s] = t;
                return e.push({
                    key: n,
                    name: s.localizedRuleName,
                    impact: s.ruleImpact
                }), e;
            }, [])), c = (a = o, a.sort((e, t) => t.impact - e.impact));
            l = c, n.innerHTML = l.reduce((e, t) => {
                const n = t.impact.toFixed(1);
                return `${e}\n      <div class="log__line log__line--${3 > n ? "fine" : "warn"}">\n        <span class="log__impact">${n}</span>\n        <span class="log__delimiter">: </span>\n        <span class="log__text">${t.name}</span>\n      </div>`;
            }, ""), n.classList.add("log--visible"), s.classList.remove("page-loading"), t.url.disabled = !1, 
            t.submit.disabled = !1;
        }).catch(e => {
            n.innerHTML = `<span class="log__error">Error: ${e.message}</span>`, n.classList.add("log--visible"), 
            s.classList.remove("page-loading");
        });
        var l, a, r;
    });
}(window.Settings);
//# sourceMappingURL=main.min.js.map
